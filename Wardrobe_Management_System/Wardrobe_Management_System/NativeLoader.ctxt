#BlueJ class context
comment0.target=NativeLoader
comment0.text=\r\n\ <p>This\ is\ for\ loading\ classes\ which\ use\ a\ native\ library.</p>\r\n\ \r\n\ <p>Greenfoot\ uses\ classloaders\ to\ allow\ the\ same\ class\ to\ be\ loaded\ multiple\ times.\r\n\ However\ if\ a\ class\ loads\ a\ native\ library,\ then\ that\ will\ be\ loaded\ multiple\ times.\r\n\ Loading\ a\ native\ library\ multiple\ times\ is\ not\ allowed\ by\ the\ JVM,\ and\ so\ it\ will\r\n\ fail.</p>\r\n\ \r\n\ <p>This\ solution\ works\ by\ manually\ loading\ classes\ using\ the\ root\ classloader,\r\n\ which\ is\ the\ parent\ to\ all\ of\ Greenfoots\ classloaders.\ By\ doing\ this\ the\ class\ is\r\n\ only\ ever\ loaded\ once\ and\ is\ accessible\ to\ all\ of\ the\ child\ classloaders.</p>\r\n\ \r\n\ @author\ Joseph\ Lenton\r\n
comment1.params=
comment1.target=NativeLoader()
comment1.text=\r\n\ Trivial\ constructor.\r\n
comment10.params=klassPath
comment10.target=void\ loadClassFile(java.lang.String)
comment10.text=\r\n\ <p>The\ same\ as\ the\ other\ loadClassFile\ method,\ only\ this\ takes\ a\ String\ path\r\n\ to\ the\ file\ to\ load.</p>\r\n\ \r\n\ @param\ klassPath\ A\ path\ to\ a\ .class\ file\ to\ load\ using\ the\ root\ classloader,\ cannot\ be\ null.\r\n
comment11.params=file
comment11.target=void\ loadClassFile(java.io.File)
comment11.text=\r\n\ <p>The\ same\ as\ the\ other\ loadClassFile\ method\ (the\ one\ that\ takes\ an\ InputStream)\r\n\ except\ that\ this\ accepts\ a\ File\ object\ instead.\ See\ that\ one\ for\ more\ information.<p>\r\n\ \r\n\ @param\ file\ A\ .class\ file\ to\ load\ using\ the\ root\ classloader,\ cannot\ be\ null.\r\n
comment12.params=input
comment12.target=void\ loadClassFile(java.io.InputStream)
comment12.text=\r\n\ <p>This\ loads\ the\ .class\ file\ that\ can\ be\ read\ from\ the\ given\ input\ stream.\r\n\ It\ is\ fully\ read\ in\ and\ then\ loaded\ manually\ with\ the\ root\ classloader.</p>\r\n\ \r\n\ <p>What\ this\ does\ is\ to\ ensure\ that\ the\ class\ is\ only\ ever\ loaded\ once,\r\n\ and\ then\ shared\ across\ every\ compilation\ of\ your\ Greenfoot\ project.</p>\r\n\ \r\n\ @param\ input\ The\ InputStream\ to\ read\ a\ .class\ file\ from,\ cannot\ be\ null.\r\n
comment13.params=input
comment13.target=java.lang.String\ load(java.io.InputStream)
comment13.text=\r\n\ <p>This\ does\ the\ actual\ loading.\ It\ reads\ the\ .class\ file\ from\ the\ given\ InputStream\ and\ then\r\n\ attempts\ to\ define\ it\ as\ a\ class\ using\ the\ root\ classloader.</p>\r\n\ \r\n\ @param\ input\ An\ InputStream\ containing\ a\ .class\ file,\ cannot\ be\ null.\r\n
comment14.params=input
comment14.target=byte[]\ inputToBytes(java.io.InputStream)
comment14.text=\r\n\ <p>Reads\ everything\ available\ from\ the\ given\ InputStream\ into\ one\ byte\ array\ and\ returns\ it.</p>\r\n\ \r\n\ @return\ The\ contents\ of\ the\ given\ InputStream\ in\ one\ giant\ byte\ array.\r\n
comment2.params=name
comment2.target=void\ loadClass(java.lang.String)
comment2.text=\r\n\ <p>Looks\ for\ and\ then\ loads\ the\ class\ given\ using\ the\ root\ class\ loader.</p>\r\n\ \r\n\ <p>The\ given\ name\ should\ be\ the\ name\ of\ a\ java\ class,\ such\ as\:\ net.foo.MyClass</p>\r\n\ \r\n\ <p>If\ the\ class\ is\ in\ the\ default\ package\ then\ it\ is\ presumed\ to\ be\ residing\ inside\r\n\ of\ the\ Greenfoot\ project\ folder.</p>\r\n\ \r\n\ @param\ The\ Java\ name\ of\ the\ class\ to\ load.\r\n
comment3.params=directory
comment3.target=void\ addClasspath(java.lang.String)
comment3.text=\r\n\ <p>The\ same\ as\ the\ other\ addClasspathDirectory\ method,\r\n\ only\ this\ takes\ a\ string\ for\ the\ directory\ to\ add\ rather\ then\ a\ File\ object.</p>\r\n\ \r\n\ @param\ directory\ The\ directory\ to\ add\ to\ the\ root\ classloaders\ classpath.\r\n
comment4.params=dir
comment4.target=void\ addClasspath(java.io.File)
comment4.text=\r\n\ <p>This\ is\ for\ adding\ directories\ to\ check\ when\ a\ loaded\ class\ is\ searching\ for\ classes.</p>\r\n\ \r\n\ <p>The\ idea\ is\ that\ if\ you\ have\ a\ class\ loaded\ using\ the\ root\ classloader,\r\n\ when\ that\ class\ imports\ other\ non-loaded\ classes\ then\ you\ want\ them\ to\ be\ found.\r\n\ That\ can\ be\ done\ by\ adding\ the\ folder\ where\ those\ classes\ are\ found\ to\ the\r\n\ root\ classloader.\ This\ method\ allows\ you\ to\ do\ that.</p>\r\n\ \r\n\ <p>Note\ that\ this\ only\ has\ an\ effect\ when\ the\ JVM\ searches\ itself\ for\ a\ class;\r\n\ it\ has\ no\ effect\ on\ where\ the\ methods\ 'loadClass'\ and\ 'loadClasses'\ search.</p>\r\n\ \r\n\ <p>You\ cannot\ add\ the\ Greenfoot\ project\ folder\ to\ the\ classpath\ (which\ is\r\n\ located\ at\ '.')\ as\ this\ will\ cause\ Greenfoot\ to\ crash.</p>\r\n\ \r\n\ <p>You\ can\ also\ pass\ in\ a\ .jar\ file\ instead\ of\ a\ directory\ to\ add\ that\ to\ the\ class\ patth.</p>\r\n\ \r\n\ @param\ dir\ The\ directory\ to\ add\ to\ the\ root\ classloaders\ classpath,\ cannot\ be\ null.\r\n
comment5.params=directory
comment5.target=void\ loadDirectory(java.lang.String)
comment5.text=\r\n\ <p>The\ same\ as\ the\ other\ loadDirectory\ method,\ only\ this\ sets\ it\ to\ load\ recursively.</p>\r\n\ \r\n\ @param\ directory\ The\ path\ to\ the\ directory\ to\ load.\r\n
comment6.params=directory\ isRecursive
comment6.target=void\ loadDirectory(java.lang.String,\ boolean)
comment6.text=\r\n\ <p>The\ same\ as\ the\ loadDirectory\ which\ takes\ a\ File\ object,\ only\ this\r\n\ takes\ the\ path\ to\ that\ directory\ as\ a\ String\ instead\ of\ instead\ a\ File.</p>\r\n\ \r\n\ @param\ directory\ The\ directory\ to\ load\ classes\ from.\r\n\ @param\ isRecursive\ True\ to\ check\ the\ directories\ within\ the\ one\ given,\ and\ load\ their\ contents\ too.\ False\ to\ not.\r\n
comment7.params=directory\ isRecursive
comment7.target=void\ loadDirectory(java.io.File,\ boolean)
comment7.text=\r\n\ <p>This\ loads\ all\ of\ the\ java\ class\ files\ found\ in\ the\ directory\ given\r\n\ using\ the\ root\ classloader.\ This\ also\ adds\ that\ directory\ to\ the\ classpath\r\n\ of\ the\ root\ classloader.<p>\r\n\ \r\n\ <p>The\ directory\ given\ is\ relative\ to\ the\ location\ of\ this\ Greenfoot\ project.</p>\r\n\ \r\n\ <p>If\ isRecursive\ is\ true\ then\ the\ same\ is\ performed\ on\ any\ directories\ found\r\n\ within\ the\ one\ given.\ If\ it\ is\ false\ then\ those\ directories\ are\ ignored.</p>\r\n\ \r\n\ @param\ directory\ The\ directory\ to\ load\ all\ class\ files\ from.\r\n\ @param\ isRecursive\ True\ to\ perform\ the\ operations\ recursively\ on\ the\ directory,\ false\ to\ not.\r\n
comment8.params=file
comment8.target=boolean\ isClassFile(java.io.File)
comment8.text=\r\n\ <p>The\ given\ file\ is\ a\ class\ file\ if\ it's\ name\ ends\ with\ '.class'.</p>\r\n\ \r\n\ @param\ file\ The\ file\ to\ test\ if\ it\ is\ or\ isn't\ a\ class\ file,\ it\ is\ expected\ not\ to\ be\ null.\r\n\ @return\ True\ if\ the\ file\ is\ a\ class\ file,\ otherwise\ false.\r\n
comment9.params=klasses
comment9.target=void\ loadClassFiles(java.lang.String[])
comment9.text=\r\n\ <p>The\ same\ as\ loadClassFile,\ except\ you\ can\ pass\ in\ multiple\ paths\ to\ this\ one.</p>\r\n\ \r\n\ @param\ klasses\ Paths\ to\ all\ of\ the\ .class\ files\ to\ load.\r\n
numComments=15
